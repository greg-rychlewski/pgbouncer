env:
  CIRRUS_CLONE_SUBMODULES: true
  DEBIAN_FRONTEND: noninteractive
  LANG: C
  PGVERSION: 16

task:
  name: Linux (Debian/Ubuntu)
  matrix:
    # - container:
    #     image: ubuntu:20.04
    # - container:
    #     image: ubuntu:20.04
    #   env:
    #     configure_args: '--disable-evdns'
    # - container:
    #     image: ubuntu:20.04
    #   env:
    #     CC: clang
    # - container:
    #     image: ubuntu:20.04
    #   env:
    #     CFLAGS: -fno-sanitize-recover=all -fsanitize=undefined -fsanitize-address-use-after-scope -fno-sanitize=shift
    - container:
        image: ubuntu:22.04
      env:
        ENABLE_VALGRIND: yes
        CFLAGS: -O0 -g
        PGVERSION: 17
    # - container:
    #     image: ubuntu:20.04
    #   env:
    #     ENABLE_VALGRIND: yes
    #     CFLAGS: -O0 -g
    #     PGVERSION: 9.6
    # - container:
    #     image: ubuntu:20.04
    #   env:
    #     use_scan_build: yes
    # - arm_container:
    #     image: ubuntu:20.04
    # - container:
    #     image: ubuntu:22.04
    # - container:
    #     image: debian:stable
    #   env:
    #     PGVERSION: 13
    # - container:
    #     image: debian:oldstable
    #   env:
    #     PGVERSION: 11
  setup_script:
    - apt-get update
    - apt-get -y install curl gnupg lsb-release
    - curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
    - echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main $PGVERSION" | tee /etc/apt/sources.list.d/pgdg.list
    - apt-get update
    - pkgs="autoconf automake ca-certificates cpio libc-ares-dev libevent-dev libpam0g-dev libssl-dev libsystemd-dev libtool make pandoc postgresql-$PGVERSION pkg-config python3 python3-pip python3-venv sudo iptables"
    - case $CC in clang) pkgs="$pkgs clang";; esac
    - if [ x"$ENABLE_VALGRIND" = x"yes" ]; then pkgs="$pkgs valgrind"; fi
    - if [ x"$use_scan_build" = x"yes" ]; then pkgs="$pkgs clang-tools"; fi
    - apt-get -y install $pkgs
    - python3 -m venv /venv
    - /venv/bin/pip install -r requirements.txt
    - useradd user
    - chown -R user .
    - echo 'user ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers
  build_script:
    - su user -c "./autogen.sh"
    - su user -c "${use_scan_build:+scan-build} ./configure --prefix=$HOME/install --enable-cassert --enable-werror --without-cares --with-systemd $configure_args"
    - su user -c "${use_scan_build:+scan-build} make -j4"
  test_script:
    - source /venv/bin/activate && su user -c "PATH=/usr/lib/postgresql/${PGVERSION}/bin:$PATH make -j4 check CONCURRENCY=4"
  install_script:
    - make -j4 install
  dist_script:
    - make -j4 dist
    - PACKAGE_VERSION=$(sed -n 's/PACKAGE_VERSION = //p' config.mak)
    - tar -x -v -f pgbouncer-${PACKAGE_VERSION}.tar.gz
    - cd pgbouncer-${PACKAGE_VERSION}/
    - ./configure --prefix=$HOME/install2 --enable-werror --without-cares $configure_args
    - make -j4
    - make -j4 install
  tarball_artifacts:
    path: "pgbouncer-*.tar.gz"
  always:
    configure_artifacts:
      path: "config.log"
      type: text/plain